{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isSafeCast = require( '@stdlib/ndarray-base-assert-is-safe-data-type-cast' );\nvar isSameKindCast = require( '@stdlib/ndarray-base-assert-is-same-kind-data-type-cast' );\nvar isFloatingPointDataType = require( '@stdlib/ndarray-base-assert-is-floating-point-data-type' );\nvar isComplexDataType = require( '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type' );\nvar isRealDataType = require( '@stdlib/ndarray-base-assert-is-real-data-type' );\nvar broadcast = require( '@stdlib/ndarray-base-broadcast-array' );\nvar unary = require( '@stdlib/ndarray-base-unary' ); // TODO: replace with `@stdlib/ndarray/base/assign` and add native add-on support\nvar identity = require( '@stdlib/utils-identity-function' ); // TODO: remove once use `@stdlib/ndarray/base/assign`\nvar castReturn = require( '@stdlib/complex-base-cast-return' );\nvar complexCtors = require( '@stdlib/complex-ctors' );\nvar slice = require( '@stdlib/ndarray-base-slice' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Assigns element values from a broadcasted input ndarray to corresponding elements in an output ndarray view.\n*\n* @param {ndarray} x - input array\n* @param {ndarray} y - output array\n* @param {MultiSlice} s - multi-slice object for the output array\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} input array must be broadcast compatible with an output array view\n* @throws {TypeError} input array cannot be safely cast to the output array data type\n* @returns {ndarray} output array\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n* var MultiSlice = require( '@stdlib/slice-multi' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndzeros = require( '@stdlib/ndarray-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* // Define an input array:\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* // Define an output array:\n* var y = ndzeros( [ 2, 3, 2 ], {\n*     'dtype': x.dtype\n* });\n*\n* // Create a slice:\n* var s0 = null;\n* var s1 = new Slice( null, null, -1 );\n* var s2 = new Slice( null, null, -1 );\n* var s = new MultiSlice( s0, s1, s2 );\n* // returns <MultiSlice>\n*\n* // Perform assignment:\n* var out = sliceAssign( x, y, s, false );\n* // returns <ndarray>\n*\n* var bool = ( out === y );\n* // returns true\n*\n* arr = ndarray2array( y );\n* // returns [ [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ], [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ] ]\n*/\nfunction sliceAssign( x, y, s, strict ) {\n\tvar view;\n\tvar fcn;\n\tvar xdt;\n\tvar ydt;\n\n\txdt = getDType( x );\n\tydt = getDType( y );\n\n\t// Safe casts are always allowed...\n\tif ( isSafeCast( xdt, ydt ) ) {\n\t\t// Check for real-to-complex conversion...\n\t\tif ( isRealDataType( xdt ) && isComplexDataType( ydt ) ) {\n\t\t\t// Need to cast a real number to a complex number:\n\t\t\tfcn = castReturn( identity, 1, complexCtors( ydt ) );\n\t\t} else {\n\t\t\t// Should only be real->real and complex->complex:\n\t\t\tfcn = identity;\n\t\t}\n\t}\n\t// Allow same kind casts (i.e., downcasts) only when the output data type is floating-point...\n\telse if ( isFloatingPointDataType( ydt ) && isSameKindCast( xdt, ydt ) ) {\n\t\t// At this point, we know that the input data type and output data type are of the same \"kind\" (e.g., real->real and complex->complex), and, thus, we don't need to perform any special conversions:\n\t\tfcn = identity;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Input array values cannot be safely cast to the output array data type. Data types: [%s, %s].', xdt, ydt ) );\n\t}\n\t// Resolve a writable output array view:\n\tview = slice( y, s, strict, true );\n\n\t// Broadcast the input array:\n\tx = broadcast( x, getShape( view, true ) );\n\n\t// Set elements from `x` in `y`:\n\tunary( [ x, view ], fcn );\n\n\t// Return the original output array:\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sliceAssign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Assign element values from a broadcasted input ndarray to corresponding elements in an output ndarray view.\n*\n* @module @stdlib/ndarray-base-slice-assign\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n* var MultiSlice = require( '@stdlib/slice-multi' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndzeros = require( '@stdlib/ndarray-zeros' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var sliceAssign = require( '@stdlib/ndarray-base-slice-assign' );\n*\n* // Define an input array:\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* // Define an output array:\n* var y = ndzeros( [ 2, 3, 2 ], {\n*     'dtype': x.dtype\n* });\n*\n* // Create a slice:\n* var s0 = null;\n* var s1 = new Slice( null, null, -1 );\n* var s2 = new Slice( null, null, -1 );\n* var s = new MultiSlice( s0, s1, s2 );\n* // returns <MultiSlice>\n*\n* // Perform assignment:\n* var out = sliceAssign( x, y, s, false );\n* // returns <ndarray>\n*\n* var bool = ( out === y );\n* // returns true\n*\n* arr = ndarray2array( y );\n* // returns [ [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ], [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,oDAAqD,EAC3EC,EAAiB,QAAS,yDAA0D,EACpFC,EAA0B,QAAS,yDAA0D,EAC7FC,EAAoB,QAAS,iEAAkE,EAC/FC,EAAiB,QAAS,+CAAgD,EAC1EC,EAAY,QAAS,sCAAuC,EAC5DC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAW,QAAS,iCAAkC,EACtDC,EAAa,QAAS,kCAAmC,EACzDC,EAAe,QAAS,uBAAwB,EAChDC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAW,QAAS,4BAA6B,EACjDC,EAAW,QAAS,4BAA6B,EACjDC,EAAS,QAAS,uBAAwB,EA8D9C,SAASC,EAAaC,EAAGC,EAAGC,EAAGC,EAAS,CACvC,IAAIC,EACAC,EACAC,EACAC,EAMJ,GAJAD,EAAMV,EAAUI,CAAE,EAClBO,EAAMX,EAAUK,CAAE,EAGbhB,EAAYqB,EAAKC,CAAI,EAEpBlB,EAAgBiB,CAAI,GAAKlB,EAAmBmB,CAAI,EAEpDF,EAAMZ,EAAYD,EAAU,EAAGE,EAAca,CAAI,CAAE,EAGnDF,EAAMb,UAIEL,EAAyBoB,CAAI,GAAKrB,EAAgBoB,EAAKC,CAAI,EAEpEF,EAAMb,MAEN,OAAM,IAAI,UAAWM,EAAQ,kHAAmHQ,EAAKC,CAAI,CAAE,EAG5J,OAAAH,EAAOT,EAAOM,EAAGC,EAAGC,EAAQ,EAAK,EAGjCH,EAAIV,EAAWU,EAAGH,EAAUO,EAAM,EAAK,CAAE,EAGzCb,EAAO,CAAES,EAAGI,CAAK,EAAGC,CAAI,EAGjBJ,CACR,CAKAjB,EAAO,QAAUe,ICnEjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isSafeCast", "isSameKindCast", "isFloatingPointDataType", "isComplexDataType", "isRealDataType", "broadcast", "unary", "identity", "castReturn", "complexCtors", "slice", "getDType", "getShape", "format", "sliceAssign", "x", "y", "s", "strict", "view", "fcn", "xdt", "ydt", "main"]
}
