{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isSafeCast from '@stdlib/ndarray-base-assert-is-safe-data-type-cast';\nimport isSameKindCast from '@stdlib/ndarray-base-assert-is-same-kind-data-type-cast';\nimport isFloatingPointDataType from '@stdlib/ndarray-base-assert-is-floating-point-data-type';\nimport isComplexDataType from '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type';\nimport isRealDataType from '@stdlib/ndarray-base-assert-is-real-data-type';\nimport broadcast from '@stdlib/ndarray-base-broadcast-array';\nimport unary from '@stdlib/ndarray-base-unary'; // TODO: replace with `@stdlib/ndarray/base/assign` and add native add-on support\nimport identity from '@stdlib/utils-identity-function'; // TODO: remove once use `@stdlib/ndarray/base/assign`\nimport castReturn from '@stdlib/complex-base-cast-return';\nimport complexCtors from '@stdlib/complex-ctors';\nimport slice from '@stdlib/ndarray-base-slice';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Assigns element values from a broadcasted input ndarray to corresponding elements in an output ndarray view.\n*\n* @param {ndarray} x - input array\n* @param {ndarray} y - output array\n* @param {MultiSlice} s - multi-slice object for the output array\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} input array must be broadcast compatible with an output array view\n* @throws {TypeError} input array cannot be safely cast to the output array data type\n* @returns {ndarray} output array\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import MultiSlice from '@stdlib/slice-multi';\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* // Define an input array:\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* // Define an output array:\n* var y = ndzeros( [ 2, 3, 2 ], {\n*     'dtype': x.dtype\n* });\n*\n* // Create a slice:\n* var s0 = null;\n* var s1 = new Slice( null, null, -1 );\n* var s2 = new Slice( null, null, -1 );\n* var s = new MultiSlice( s0, s1, s2 );\n* // returns <MultiSlice>\n*\n* // Perform assignment:\n* var out = sliceAssign( x, y, s, false );\n* // returns <ndarray>\n*\n* var bool = ( out === y );\n* // returns true\n*\n* arr = ndarray2array( y );\n* // returns [ [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ], [ [ 6.0, 5.0 ], [ 4.0, 3.0 ], [ 2.0, 1.0 ] ] ]\n*/\nfunction sliceAssign( x, y, s, strict ) {\n\tvar view;\n\tvar fcn;\n\tvar xdt;\n\tvar ydt;\n\n\txdt = getDType( x );\n\tydt = getDType( y );\n\n\t// Safe casts are always allowed...\n\tif ( isSafeCast( xdt, ydt ) ) {\n\t\t// Check for real-to-complex conversion...\n\t\tif ( isRealDataType( xdt ) && isComplexDataType( ydt ) ) {\n\t\t\t// Need to cast a real number to a complex number:\n\t\t\tfcn = castReturn( identity, 1, complexCtors( ydt ) );\n\t\t} else {\n\t\t\t// Should only be real->real and complex->complex:\n\t\t\tfcn = identity;\n\t\t}\n\t}\n\t// Allow same kind casts (i.e., downcasts) only when the output data type is floating-point...\n\telse if ( isFloatingPointDataType( ydt ) && isSameKindCast( xdt, ydt ) ) {\n\t\t// At this point, we know that the input data type and output data type are of the same \"kind\" (e.g., real->real and complex->complex), and, thus, we don't need to perform any special conversions:\n\t\tfcn = identity;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Input array values cannot be safely cast to the output array data type. Data types: [%s, %s].', xdt, ydt ) );\n\t}\n\t// Resolve a writable output array view:\n\tview = slice( y, s, strict, true );\n\n\t// Broadcast the input array:\n\tx = broadcast( x, getShape( view, true ) );\n\n\t// Set elements from `x` in `y`:\n\tunary( [ x, view ], fcn );\n\n\t// Return the original output array:\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default sliceAssign;\n"],"names":["sliceAssign","x","y","s","strict","view","fcn","xdt","ydt","getDType","isSafeCast","isRealDataType","isComplexDataType","castReturn","identity","complexCtors","isFloatingPointDataType","isSameKindCast","TypeError","format","slice","broadcast","getShape","unary"],"mappings":";;s5CAiGA,SAASA,EAAaC,EAAGC,EAAGC,EAAGC,GAC9B,IAAIC,EACAC,EACAC,EACAC,EAMJ,GAJAD,EAAME,EAAUR,GAChBO,EAAMC,EAAUP,GAGXQ,EAAYH,EAAKC,GAIpBF,EAFIK,EAAgBJ,IAASK,EAAmBJ,GAE1CK,EAAYC,EAAU,EAAGC,EAAcP,IAGvCM,MAIH,KAAKE,EAAyBR,KAASS,EAAgBV,EAAKC,GAIhE,MAAM,IAAIU,UAAWC,EAAQ,kHAAmHZ,EAAKC,IAFrJF,EAAMQ,CAGN,CAWD,OATAT,EAAOe,EAAOlB,EAAGC,EAAGC,GAAQ,GAG5BH,EAAIoB,EAAWpB,EAAGqB,EAAUjB,GAAM,IAGlCkB,EAAO,CAAEtB,EAAGI,GAAQC,GAGbJ,CACR"}